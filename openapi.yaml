openapi: 3.0.3
info:
  title: SmallAuth API
  version: 1.0.0
  description: Auth microservice with RBAC, password recovery, and security features
servers:
  - url: http://localhost:8080
paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '201':
          description: User registered
        '400':
          description: Invalid request or weak password
  /login:
    post:
      summary: Login and get JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: JWT and redirect URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
  /token/validate:
    post:
      summary: Validate JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateTokenRequest'
      responses:
        '200':
          description: Token validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateTokenResponse'
  /user/recover:
    post:
      summary: Initiate password recovery
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecoverPasswordRequest'
      responses:
        '200':
          description: Recovery instructions sent if email exists
  /user:
    get:
      summary: Get current user data
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update user data
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated
  /user/password:
    put:
      summary: Change password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed
  /user/auto-redirect:
    put:
      summary: Set or update user's auto redirect URL
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetAutoRedirectRequest'
      responses:
        '200':
          description: Auto redirect URL updated
  /admin/users:
    get:
      summary: List users (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /admin/users/{id}/roles:
    put:
      summary: Change user roles (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeUserRolesRequest'
      responses:
        '200':
          description: User roles updated
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterUserRequest:
      type: object
      required:
        - username
        - email
        - recovery_email
        - password
      properties:
        username:
          type: string
        email:
          type: string
        recovery_email:
          type: string
        password:
          type: string
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string
        redirect_url:
          type: string
    ValidateTokenRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    ValidateTokenResponse:
      type: object
      properties:
        valid:
          type: boolean
        claims:
          type: object
    RecoverPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
    ChangePasswordRequest:
      type: object
      required:
        - old_password
        - new_password
      properties:
        old_password:
          type: string
        new_password:
          type: string
    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
        recovery_email:
          type: string
        auto_redirect_url:
          type: string
    SetAutoRedirectRequest:
      type: object
      required:
        - auto_redirect_url
      properties:
        auto_redirect_url:
          type: string
    ChangeUserRolesRequest:
      type: object
      required:
        - role_ids
      properties:
        role_ids:
          type: array
          items:
            type: integer
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        recovery_email:
          type: string
        auto_redirect_url:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    Role:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
    Permission:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
